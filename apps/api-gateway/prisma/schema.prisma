// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("USERS_DATABASE_URL")
}

enum UserStatus {
  active
  blocked
}

enum VerificationPurpose {
  PASSWORD_RESET
  EMAIL_VERIFICATION
}

model User {
  user_id        Int        @id @default(autoincrement())
  full_name      String     @db.VarChar
  email          String     @unique @db.VarChar
  password       String     @db.VarChar
  phone          String?    @db.VarChar
  address        String?    @db.Text
  dateOfBirth    DateTime?  @db.Date @map("date_of_birth")
  gender         String?    @db.VarChar
  avatar         String?    @db.VarChar
  status         UserStatus @default(active)
  created_at     DateTime   @default(now()) @db.Timestamp(6)
  updated_at     DateTime?  @updatedAt @db.Timestamp(6)
  verificationCodes VerificationCode[]
  userRoles      UserRole[]

  @@map("users")
}

model Role {
  role_id      Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(50)
  description  String?        @db.Text
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @updatedAt @db.Timestamp(6)
  userRoles    UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  permission_id Int              @id @default(autoincrement())
  key          String           @unique @db.VarChar(100)
  name         String           @db.VarChar(100)
  description  String?          @db.Text
  resource     String           @db.VarChar(50)
  action       String           @db.VarChar(20)
  created_at   DateTime         @default(now()) @db.Timestamp(6)
  updated_at   DateTime?        @updatedAt @db.Timestamp(6)
  rolePermissions RolePermission[]

  @@map("permissions")
}

model UserRole {
  user_role_id Int      @id @default(autoincrement())
  user_id      Int
  role_id      Int
  created_at   DateTime @default(now()) @db.Timestamp(6)
  user         User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  role         Role     @relation(fields: [role_id], references: [role_id], onDelete: Cascade)

  @@unique([user_id, role_id])
  @@map("user_roles")
}

model RolePermission {
  role_permission_id Int        @id @default(autoincrement())
  role_id           Int
  permission_id     Int
  created_at        DateTime   @default(now()) @db.Timestamp(6)
  role              Role       @relation(fields: [role_id], references: [role_id], onDelete: Cascade)
  permission        Permission @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade)

  @@unique([role_id, permission_id])
  @@map("role_permissions")
}

model VerificationCode {
  id          Int               @id @default(autoincrement())
  code        String            @db.VarChar(8)
  purpose     VerificationPurpose
  expires_at  DateTime          @db.Timestamp(6)
  created_at  DateTime          @default(now()) @db.Timestamp(6)
  used        Boolean           @default(false)
  user_id     Int
  user        User              @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([code])
  @@map("verification_codes")
}
